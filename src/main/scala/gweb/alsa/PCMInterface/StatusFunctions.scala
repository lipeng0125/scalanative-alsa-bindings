package gweb.alsa.PCMInterface

import scala.scalanative.unsafe.*
import gweb.alsa.PCMInterface.PCMInterface.snd_pcm_status_t
import gweb.alsa.PCMInterface.PCMInterface.snd_pcm_state_t
import gweb.alsa.GlobalDefinesAndFunctions.snd_timestamp_t
import gweb.alsa.GlobalDefinesAndFunctions.snd_htimestamp_t
import gweb.alsa.PCMInterface.PCMInterface.snd_pcm_audio_tstamp_report_t
import gweb.alsa.PCMInterface.PCMInterface.snd_pcm_audio_tstamp_config_t
import gweb.alsa.PCMInterface.PCMInterface.snd_pcm_sframes_t
import gweb.alsa.PCMInterface.PCMInterface.snd_pcm_uframes_t

/** See the PCM (digital audio) interface page for more details.
  */
@link("asound")
@extern
object StatusFunctions {

  /** get size of snd_pcm_status_t
    *
    * @return
    *   size in bytes
    */
  @name("snd_pcm_status_sizeof")
  def snd_pcm_status_sizeof(): CSize = extern

  /** allocate an invalid snd_pcm_status_t using standard malloc
    *
    * @param ptr
    *   returned pointer
    * @return
    *   0 on success otherwise negative error code
    */
  @name("snd_pcm_status_malloc")
  def snd_pcm_status_malloc(ptr: Ptr[Ptr[snd_pcm_status_t]]): CInt = extern

  /** frees a previously allocated snd_pcm_status_t
    *
    * @param obj
    *   pointer to object to free
    */
  @name("snd_pcm_status_free")
  def snd_pcm_status_free(obj: Ptr[snd_pcm_status_t]): Unit = extern

  /** copy one snd_pcm_status_t to another
    *
    * @param dst
    *   pointer to destination
    * @param src
    *   pointer to source
    */
  @name("snd_pcm_status_copy")
  def snd_pcm_status_copy(
      dst: Ptr[snd_pcm_status_t],
      src: Ptr[snd_pcm_status_t]
  ): Unit = extern

  /** Get state from a PCM status container (see snd_pcm_state)
    *
    * @param obj
    *   snd_pcm_status_t pointer
    * @return
    *   PCM state
    */
  @name("snd_pcm_status_get_state")
  def snd_pcm_status_get_state(obj: Ptr[snd_pcm_status_t]): snd_pcm_state_t =
    extern

  /** Get trigger timestamp from a PCM status container.
    *
    * @param obj
    *   snd_pcm_status_t pointer
    * @param ptr
    *   Pointer to returned timestamp
    *
    * Trigger means a PCM state transition (from stopped to running or versa
    * vice). It applies also to pause and suspend. In other words, timestamp
    * contains time when stream started or when it was stopped.
    */
  @name("snd_pcm_status_get_trigger_tstamp")
  def snd_pcm_status_get_trigger_tstamp(
      obj: Ptr[snd_pcm_status_t],
      ptr: Ptr[snd_timestamp_t]
  ): Unit = extern

  /** Get trigger hi-res timestamp from a PCM status container.
    *
    * @param obj
    *   snd_pcm_status_t pointer
    * @param ptr
    *   Pointer to returned timestamp
    *
    * Trigger means a PCM state transition (from stopped to running or versa
    * vice). It applies also to pause and suspend. In other words, timestamp
    * contains time when stream started or when it was stopped.
    */
  @name("snd_pcm_status_get_trigger_htstamp")
  def snd_pcm_status_get_trigger_htstamp(
      obj: Ptr[snd_pcm_status_t],
      ptr: Ptr[snd_htimestamp_t]
  ): Unit = extern

  /** Get "now" timestamp from a PCM status container.
    *
    * @param obj
    *   snd_pcm_status_t pointer
    * @param ptr
    *   Pointer to returned timestamp
    */
  @name("snd_pcm_status_get_tstamp")
  def snd_pcm_status_get_tstamp(
      obj: Ptr[snd_pcm_status_t],
      ptr: Ptr[snd_timestamp_t]
  ): Unit = extern

  /** Get "now" hi-res timestamp from a PCM status container.
    *
    * @param obj
    *   pointer to snd_pcm_status_t
    * @param ptr
    *   Pointer to returned timestamp
    */
  @name("snd_pcm_status_get_htstamp")
  def snd_pcm_status_get_htstamp(
      obj: Ptr[snd_pcm_status_t],
      ptr: Ptr[snd_htimestamp_t]
  ): Unit = extern

  /** Get "now" hi-res audio timestamp from a PCM status container.
    *
    * @param obj
    *   pointer to snd_pcm_status_t
    * @param ptr
    *   Pointer to returned timestamp
    */
  @name("snd_pcm_status_get_audio_htstamp")
  def snd_pcm_status_get_audio_htstamp(
      obj: Ptr[snd_pcm_status_t],
      ptr: Ptr[snd_htimestamp_t]
  ): Unit = extern

  /** Get "now" hi-res driver timestamp from a PCM status container. Defines
    * when the status was generated by driver, may differ from normal timestamp.
    *
    * @param obj
    *   pointer to snd_pcm_status_t
    * @param ptr
    *   Pointer to returned timestamp
    */
  @name("snd_pcm_status_get_driver_htstamp")
  def snd_pcm_status_get_driver_htstamp(
      obj: Ptr[snd_pcm_status_t],
      ptr: Ptr[snd_htimestamp_t]
  ): Unit = extern

  /** Get audio_tstamp_report from a PCM status container.
    *
    * @param obj
    *   pointer to snd_pcm_status_t
    * @param audio_tstamp_report
    *   Pointer to returned report
    */
  @name("snd_pcm_status_get_audio_htstamp_report")
  def snd_pcm_status_get_audio_htstamp_report(
      obj: Ptr[snd_pcm_status_t],
      audio_tstamp_report: Ptr[snd_pcm_audio_tstamp_report_t]
  ): Unit = extern

  /** set audio_tstamp_config from a PCM status container
    *
    * @param obj
    *   pointer to snd_pcm_status_t
    * @param audio_tstamp_config
    *   Pointer to config (valid fields are type_requested and report_delay)
    */
  @name("snd_pcm_status_set_audio_htstamp_config")
  def snd_pcm_status_set_audio_htstamp_config(
      obj: Ptr[snd_pcm_status_t],
      audio_tstamp_config: Ptr[snd_pcm_audio_tstamp_config_t]
  ): Unit = extern

  /** Get delay from a PCM status container (see snd_pcm_delay)
    *
    * @return
    *   Delay in frames
    *
    * Delay is distance between current application frame position and sound
    * frame position. It's positive and less than buffer size in normal
    * situation, negative on playback underrun and greater than buffer size on
    * capture overrun.
    */
  @name("snd_pcm_status_get_delay")
  def snd_pcm_status_get_delay(obj: Ptr[snd_pcm_status_t]): snd_pcm_sframes_t =
    extern

  /** Get number of frames available from a PCM status container (see
    * snd_pcm_avail_update)
    *
    * @return
    *   Number of frames ready to be read/written
    */
  @name("snd_pcm_status_get_avail")
  def snd_pcm_status_get_avail(obj: Ptr[snd_pcm_status_t]): snd_pcm_uframes_t =
    extern

  /** Get maximum number of frames available from a PCM status container after
    * last snd_pcm_status call.
    *
    * @return
    *   Maximum number of frames ready to be read/written
    *
    * This value returns the peak for the available frames between
    * snd_pcm_status calls.
    */
  @name("snd_pcm_status_get_avail_max")
  def snd_pcm_status_get_avail_max(
      obj: Ptr[snd_pcm_status_t]
  ): snd_pcm_uframes_t = extern

  /** Get count of ADC overrange detections since last call.
    *
    * @return
    *   Count of ADC overrange detections
    */
  @name("snd_pcm_status_get_overrange")
  def snd_pcm_status_get_overrange(
      obj: Ptr[snd_pcm_status_t]
  ): snd_pcm_uframes_t = extern

}
